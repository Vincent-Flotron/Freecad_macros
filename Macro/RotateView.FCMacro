import FreeCAD as App
import FreeCADGui as Gui
from PySide2 import QtGui, QtCore, QtWidgets

# The rotate function that applies the selected view
def rotate_projgroup(selection=None, view='FrontBottomLeft'):
    # Define standard view directions and their corresponding XDirections
    views = {
        'FrontBottomLeft': {
            'Direction': (-1, -1, 1),
            'XDirection': (1, 0, 0)
        },
        'FrontBottomRight': {
            'Direction': (1, -1, 1),
            'XDirection': (0, 1, 0)
        },
        'FrontTopRight': {
            'Direction': (1, 1, 1),
            'XDirection': (-1, 0, 0)
        },
        'FrontTopLeft': {
            'Direction': (-1, 1, 1),
            'XDirection': (0, -1, 0)
        }
    }

    rotation_angle = 30  #deg

    # If no selection provided, get the current selection from the GUI
    if selection is None:
        selection = Gui.Selection.getSelection()

    # Check if the selection is not empty
    if not selection:
        QtGui.QMessageBox.warning(None, "Selection Error", "No object selected. Please select a DrawProjGroup item.")
        return

    # Grab the first selected object
    selected_obj = selection[0]

    # Check if the selected object is of type 'TechDraw::DrawProjGroup'
    if selected_obj.TypeId != 'TechDraw::DrawProjGroup':
        QtGui.QMessageBox.warning(None, "Selection Error", "Selected object is not a TechDraw::DrawProjGroup.")
        return

    # Check if the specified view exists
    if view not in views:
        QtGui.QMessageBox.warning(None, "View Error", f"View '{view}' is not recognized. Valid views are: {list(views.keys())}")
        return

    # Set the view direction and corresponding XDirection based on the selected view
    view_direction  = views[view]['Direction']
    view_xdirection = views[view]['XDirection']

    # Iterate through items in the projection group and set the view direction and XDirection
    for view_item in selected_obj.OutList:
        # Check if the view_item has the 'Direction' and 'XDirection' attributes (i.e., it's a valid projection view)
        if hasattr(view_item, 'Direction') and hasattr(view_item, 'XDirection'):
            view_item.Direction  = App.Vector(view_direction)
            view_item.XDirection = App.Vector(view_xdirection)
            view_item.Rotation   = rotation_angle
        else:
            # If the item does not support 'Direction' or 'XDirection', skip it
            print(f"Skipping item: {view_item.Name}, does not support 'Direction' or 'XDirection'.")

    # Update the document to reflect changes
    try:
        App.ActiveDocument.recompute()
        print(f"Projection group rotated to view: {view}")
    except Exception as e:
        print(f"Recompute failed: {e}")


# Class to create a simple GUI for selecting the view and applying rotation
class ViewSelectionDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ViewSelectionDialog, self).__init__(parent)
        
        # Set window title
        self.setWindowTitle("Select Projection View")
        
        # Define the available views
        self.views = ['FrontBottomLeft', 'FrontBottomRight', 'FrontTopRight', 'FrontTopLeft']
        
        # Create the combo box for view selection
        self.combo = QtWidgets.QComboBox()
        self.combo.addItems(self.views)
        
        # Create a Finish button
        self.finish_button = QtWidgets.QPushButton("Finish")
        
        # Create layout and add widgets
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(QtWidgets.QLabel("Select a view:"))
        layout.addWidget(self.combo)
        layout.addWidget(self.finish_button)
        self.setLayout(layout)
        
        # Connect signals to methods
        self.combo.currentIndexChanged.connect(self.update_view)
        self.finish_button.clicked.connect(self.accept)
        
        # Connect ENTER key to the finish action
        self.combo.installEventFilter(self)
        
        # Call rotate_projgroup with the default view on startup
        self.update_view()
    
    def update_view(self):
        """Update the view when a new one is selected."""
        selected_view = self.combo.currentText()
        rotate_projgroup(view=selected_view)
    
    def eventFilter(self, source, event):
        """Capture the ENTER key to finish selection."""
        if event.type() == QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Return or event.key() == QtCore.Qt.Key_Enter:
                self.accept()
                return True
        return super(ViewSelectionDialog, self).eventFilter(source, event)

# Function to show the view selection dialog
def select_view_dialog():
    dialog = ViewSelectionDialog()
    dialog.exec_()

# Example usage:
# Call this to open the view selection GUI
select_view_dialog()
